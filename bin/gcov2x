#!/usr/bin/env ruby

require 'mixlib/cli'

require_relative '../lib/logging'
require_relative '../lib/gcov2x'
require_relative '../lib/ansii_formatter'
require_relative '../lib/xml_formatter'
require_relative '../lib/html_formatter'
require_relative '../lib/json_formatter'
require_relative '../lib/version'

class Util
  def Util.opt_wrap(s, width=61)
    s.gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n                                     ")
  end
end

class CGOV_CLI
  include Mixlib::CLI
  
  banner "gcov2x v#{GCOV::VERSION}

 Usage:"

  option :filter,
  :long => "--filter FILTER",
  :description => Util.opt_wrap("A semicolon-separated list of regex filters which specify which files NOT to include in the conversion. Will filter on the actual filename (replacing any mangling done by llvm-cov using #'s) as well as the 'Source' meta attribute in the GCOV data. 
Available presets:
:xcode - Xcode system headers
:linux - Linux system headers
"),
  :proc => Proc.new { |f|
    values = f.split(';')
    values = values.map{|f| f.size > 0 and f[0] == ":" ? f[1..-1].to_sym : f }
    values
  },
  :on => :tail

  option :format,
  :short => "-f FORMAT",
  :long => "--format FORMAT",
  :description => Util.opt_wrap("The output format (ascii, html, xml, json)"),
  :proc => Proc.new { |f| f.to_sym }
  
  option :css,
  :short => "-c CSS",
  :long => "--css CSS",
  :description => Util.opt_wrap("CSS file to reference in HTML output.")

  option :xsl,
  :short => "-x XSL",
  :long => "--xsl XSL",
  :description => Util.opt_wrap("XSL file to reference in XML output.")

  option :recursive,
  :short => "-r",
  :long => "--recursive",
  :description => Util.opt_wrap("Recursively load all .gcov files in the given directory"),
  :on => :tail,
  :boolean => true
  
  option :verbose,
  :short => "-v",
  :long => "--verbose",
  :description => Util.opt_wrap("Verbose output"),
  :boolean => true

  option :help,
  :short => "-h",
  :long => "--help",
  :description => Util.opt_wrap("Show this message"),
  :on => :tail,
  :boolean => true,
  :show_options => true,
  :exit => 0
  
end

cli = CGOV_CLI.new
filenames = cli.parse_options

fail "Got no filename" unless filenames.is_a? Array and filenames.count > 0

if cli.config[:verbose]
  GCOV::logger.level = Logger::INFO
end

proj = GCOV::Project.new

filter = []

if !cli.config[:filter].nil? 
  cli.config[:filter].each do |f|
    filter <<  case f
               when :xcode then /Developer\/(Toolchains|Platforms)\/.*\/usr\/include\//
               when :linux then /\/usr\/include\//
               when nil then nil
               else /#{f}/
               end
  end # each f
end

GCOV::logger.info "filter: #{filter}"

filenames.each do |filename|
  GCOV::logger.info "processing: #{filename}"
  if File.directory? filename
    proj.add_dir filename, :recursive => cli.config[:recursive], :filter => filter
  elsif File.file? filename
    proj.add_file filename, :filter => filter
  end
end

case cli.config[:format]
when :ascii then
  formatter = GCOV::ANSIIFormatter.new proj
  formatter.print
when :html then
  formatter = GCOV::HTMLFormatter.new( proj, :css => cli.config[:css] )
  formatter.print
when :xml then
  formatter = GCOV::XMLFormatter.new( proj, :xsl => cli.config[:xsl] )
  formatter.print
when :json then
  formatter = GCOV::JSONFormatter.new proj
  formatter.print
else
  fail "Invalid format"
end

